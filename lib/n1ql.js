/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var n1ql = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,10],$V2=[1,17],$V3=[1,16],$V4=[1,86],$V5=[1,77,86],$V6=[1,34,69,70,77,86],$V7=[2,105],$V8=[1,27],$V9=[15,20,51,78,82,85,88,100,103,110,115,117,118,120,126,130,131,132],$Va=[1,36],$Vb=[1,49],$Vc=[2,24],$Vd=[1,59],$Ve=[1,61],$Vf=[1,74],$Vg=[1,55],$Vh=[1,54],$Vi=[1,56],$Vj=[1,76],$Vk=[1,73],$Vl=[1,62],$Vm=[1,63],$Vn=[1,64],$Vo=[1,65],$Vp=[1,66],$Vq=[1,67],$Vr=[1,71],$Vs=[1,72],$Vt=[1,75],$Vu=[1,82],$Vv=[34,42,69],$Vw=[1,34,42,69,70,77,86],$Vx=[1,88],$Vy=[1,89],$Vz=[1,90],$VA=[1,91],$VB=[1,34,42,57,61,63,66,67,69,70,77,86],$VC=[1,96],$VD=[1,97],$VE=[1,98],$VF=[1,95],$VG=[1,15,17,34,42,50,57,61,63,64,65,66,67,69,70,77,86,100],$VH=[1,70,77,86],$VI=[1,15,22,34,37,42,48,50,53,69,70,73,74,77,86,101],$VJ=[2,119],$VK=[1,131],$VL=[1,118],$VM=[1,113],$VN=[1,122],$VO=[1,114],$VP=[1,115],$VQ=[1,116],$VR=[1,117],$VS=[1,119],$VT=[1,120],$VU=[1,121],$VV=[1,123],$VW=[1,124],$VX=[1,125],$VY=[1,126],$VZ=[1,127],$V_=[1,128],$V$=[1,129],$V01=[1,130],$V11=[1,132],$V21=[1,133],$V31=[1,15,17,22,34,37,42,48,50,51,53,57,61,63,66,67,69,70,73,74,77,80,81,82,83,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,111,114,116,119,122,123],$V41=[1,135],$V51=[1,138],$V61=[1,140],$V71=[2,159],$V81=[1,142],$V91=[2,203],$Va1=[1,34,53,69,70,77,86],$Vb1=[1,34,48,53,69,70,77,86],$Vc1=[57,61,63],$Vd1=[1,48,77,86],$Ve1=[1,189],$Vf1=[1,206],$Vg1=[1,225],$Vh1=[1,231],$Vi1=[17,51,81,82,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,116],$Vj1=[1,22,37,42,70,77,86,101],$Vk1=[1,255],$Vl1=[1,256],$Vm1=[1,42,70,77,86],$Vn1=[1,15,22,34,37,42,48,50,53,57,61,63,66,67,69,70,73,74,77,80,81,83,86,87,88,92,93,94,95,96,97,98,99,101,111,114,116,119,122,123],$Vo1=[1,15,22,34,37,42,48,50,51,53,57,61,63,66,67,69,70,73,74,77,80,81,83,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,111,114,116,119,122,123],$Vp1=[2,133],$Vq1=[1,15,22,34,37,42,48,50,53,57,61,63,66,67,69,70,73,74,77,80,81,83,86,92,93,94,95,96,97,98,99,101,111,114,116,119,122,123],$Vr1=[22,48],$Vs1=[2,182],$Vt1=[1,293],$Vu1=[1,331],$Vv1=[1,330],$Vw1=[114,123];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"input":3,"stmt":4,"EXPLAIN":5,"select_stmt":6,"create_index_stmt":7,"drop_index_stmt":8,"create_primary_index_stmt":9,"create_secondary_index_stmt":10,"CREATE":11,"PRIMARY":12,"INDEX":13,"ON":14,"IDENTIFIER":15,"COLON":16,"DOT":17,"USING":18,"view_using":19,"LPAREN":20,"expression_list":21,"RPAREN":22,"VIEW":23,"DROP":24,"select_compound":25,"select_core":26,"select_order":27,"select_limit_offset":28,"select_select":29,"select_from":30,"select_where":31,"select_group_having":32,"select_from_required":33,"GROUP":34,"BY":35,"having":36,"HAVING":37,"expression":38,"select_select_head":39,"select_select_qualifier":40,"select_select_tail":41,"SELECT":42,"ALL":43,"DISTINCT":44,"UNIQUE":45,"result_list":46,"result_single":47,"COMMA":48,"dotted_path_star":49,"AS":50,"MULT":51,"expr":52,"FROM":53,"data_source_unnest":54,"data_source":55,"unnest_source":56,"UNNEST":57,"path":58,"join_type":59,"key_expr":60,"JOIN":61,"join_key_expr":62,"NEST":63,"KEY":64,"KEYS":65,"INNER":66,"LEFT":67,"OUTER":68,"WHERE":69,"ORDER":70,"sorting_list":71,"sorting_single":72,"ASC":73,"DESC":74,"select_limit":75,"select_offset":76,"LIMIT":77,"INT":78,"OFFSET":79,"BETWEEN":80,"AND":81,"NOT":82,"IN":83,"subquery_expr":84,"LBRACE":85,"RBRACE":86,"PLUS":87,"MINUS":88,"DIV":89,"MOD":90,"CONCAT":91,"OR":92,"EQ":93,"LT":94,"LTE":95,"GT":96,"GTE":97,"NE":98,"LIKE":99,"LBRACKET":100,"RBRACKET":101,"IS":102,"NULL":103,"MISSING":104,"VALUED":105,"prefix_expr":106,"suffix_expr":107,"atom":108,"literal_value":109,"CASE":110,"WHEN":111,"then_list":112,"else_expr":113,"END":114,"ANY":115,"SATISFIES":116,"EVERY":117,"FIRST":118,"FOR":119,"ARRAY":120,"function_arg_list":121,"THEN":122,"ELSE":123,"function_arg_single":124,"fun_dotted_path_star":125,"STRING":126,"number":127,"object":128,"array":129,"TRUE":130,"FALSE":131,"NUMBER":132,"named_expression_list":133,"named_expression_single":134,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EXPLAIN",11:"CREATE",12:"PRIMARY",13:"INDEX",14:"ON",15:"IDENTIFIER",16:"COLON",17:"DOT",18:"USING",20:"LPAREN",22:"RPAREN",23:"VIEW",24:"DROP",34:"GROUP",35:"BY",37:"HAVING",42:"SELECT",43:"ALL",44:"DISTINCT",45:"UNIQUE",48:"COMMA",50:"AS",51:"MULT",53:"FROM",57:"UNNEST",61:"JOIN",63:"NEST",64:"KEY",65:"KEYS",66:"INNER",67:"LEFT",68:"OUTER",69:"WHERE",70:"ORDER",73:"ASC",74:"DESC",77:"LIMIT",78:"INT",79:"OFFSET",80:"BETWEEN",81:"AND",82:"NOT",83:"IN",85:"LBRACE",86:"RBRACE",87:"PLUS",88:"MINUS",89:"DIV",90:"MOD",91:"CONCAT",92:"OR",93:"EQ",94:"LT",95:"LTE",96:"GT",97:"GTE",98:"NE",99:"LIKE",100:"LBRACKET",101:"RBRACKET",102:"IS",103:"NULL",104:"MISSING",105:"VALUED",110:"CASE",111:"WHEN",114:"END",115:"ANY",116:"SATISFIES",117:"EVERY",118:"FIRST",119:"FOR",120:"ARRAY",122:"THEN",123:"ELSE",126:"STRING",130:"TRUE",131:"FALSE",132:"NUMBER"},
productions_: [0,[3,1],[3,2],[4,1],[4,1],[4,1],[7,1],[7,1],[9,5],[9,8],[9,7],[9,10],[10,8],[10,11],[10,10],[10,13],[19,1],[19,1],[8,5],[8,8],[6,1],[25,3],[26,4],[26,4],[32,0],[32,4],[36,0],[36,2],[29,3],[39,1],[40,0],[40,1],[40,1],[40,1],[41,1],[46,1],[46,3],[47,1],[47,1],[47,3],[47,2],[49,1],[49,3],[30,0],[30,2],[30,5],[33,2],[33,5],[54,1],[54,2],[56,2],[56,4],[56,3],[56,3],[56,5],[56,4],[56,3],[56,5],[56,4],[56,4],[56,6],[56,5],[56,4],[56,5],[56,6],[56,5],[56,6],[56,7],[56,3],[56,5],[56,4],[56,4],[56,6],[56,5],[56,4],[56,5],[56,5],[56,6],[56,6],[56,7],[56,3],[56,5],[56,4],[56,4],[56,6],[56,5],[56,4],[56,5],[56,5],[56,6],[56,6],[56,7],[62,2],[62,2],[59,1],[59,1],[59,2],[55,1],[55,2],[55,3],[55,2],[55,4],[55,3],[60,2],[60,2],[31,0],[31,2],[27,0],[27,3],[71,1],[71,3],[72,1],[72,2],[72,2],[28,0],[28,1],[28,2],[75,2],[76,2],[38,1],[38,5],[38,6],[38,3],[38,4],[38,1],[84,3],[84,4],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,4],[52,3],[52,4],[52,6],[52,5],[52,5],[52,3],[52,4],[52,3],[52,4],[52,3],[52,4],[52,1],[106,2],[106,2],[106,1],[107,1],[108,1],[108,1],[108,3],[108,5],[108,6],[108,5],[108,7],[108,7],[108,5],[108,9],[108,7],[108,7],[108,5],[108,9],[108,7],[108,7],[108,5],[108,3],[108,4],[108,5],[108,5],[112,3],[112,5],[113,0],[113,2],[58,1],[58,4],[58,6],[58,5],[58,5],[58,3],[121,1],[121,3],[124,1],[124,1],[125,1],[125,3],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[127,1],[127,1],[128,2],[128,3],[133,1],[133,3],[134,3],[129,2],[129,3],[21,1],[21,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	yy.logDebugGrammar("INPUT")

break;
case 2:

	yy.logDebugGrammar("INPUT - EXPLAIN");
	yy.pStmt.ExplainOnly = true;

break;
case 3:

	yy.logDebugGrammar("STMT - SELECT")

break;
case 4: case 24: case 26: case 30: case 124:


break;
case 5:

	yy.logDebugGrammar("STMT - DROP INDEX")

break;
case 6:

	yy.logDebugGrammar("STMT - CREATE PRIMARY INDEX")

break;
case 7:

	yy.logDebugGrammar("STMT - CREATE SECONDARY INDEX")

break;
case 8:

/*	bucket := $$[$0].s
	createIndexStmt := ast.NewCreateIndexStatement()
	createIndexStmt.Bucket = bucket
	createIndexStmt.Primary = true
	parsingStatement = createIndexStmt */

break;
case 9:

/*	pool := $$[$0-2].s
	bucket := $$[$0].s
	createIndexStmt := ast.NewCreateIndexStatement()
	createIndexStmt.Pool = pool
	createIndexStmt.Bucket = bucket
	createIndexStmt.Primary = true
	parsingStatement = createIndexStmt */

break;
case 10:

/*	method := parsingStack.Pop().(string)
	bucket := $$[$0-2].s
	createIndexStmt := ast.NewCreateIndexStatement()
	createIndexStmt.Bucket = bucket
	createIndexStmt.Method = method
	createIndexStmt.Primary = true
	parsingStatement = createIndexStmt */

break;
case 11:

/*	method := parsingStack.Pop().(string)
	bucket := $$[$0-2].s
	pool := $$[$0-4].s
	createIndexStmt := ast.NewCreateIndexStatement()
	createIndexStmt.Pool = pool
	createIndexStmt.Bucket = bucket
	createIndexStmt.Method = method
	createIndexStmt.Primary = true
	parsingStatement = createIndexStmt */

break;
case 12:

/*	on := parsingStack.Pop().(ast.ExpressionList)
	bucket := $$[$0-3].s
	name := $$[$0-5].s
	createIndexStmt := ast.NewCreateIndexStatement()
	createIndexStmt.On = on
	createIndexStmt.Bucket = bucket
	createIndexStmt.Name = name
	createIndexStmt.Primary = false
	parsingStatement = createIndexStmt */

break;
case 13:

/*	on := parsingStack.Pop().(ast.ExpressionList)
	bucket := $$[$0-3].s
	pool := $$[$0-5].s
	name := $$[$0-8].s
	createIndexStmt := ast.NewCreateIndexStatement()
	createIndexStmt.On = on
	createIndexStmt.Pool = pool
	createIndexStmt.Bucket = bucket
	createIndexStmt.Name = name
	createIndexStmt.Primary = false
	parsingStatement = createIndexStmt */

break;
case 14:

/*	method := parsingStack.Pop().(string)
	on := parsingStack.Pop().(ast.ExpressionList)
	bucket := $$[$0-5].s
	name := $$[$0-7].s
	createIndexStmt := ast.NewCreateIndexStatement()
	createIndexStmt.On = on
	createIndexStmt.Bucket = bucket
	createIndexStmt.Name = name
	createIndexStmt.Method = method
	createIndexStmt.Primary = false
	parsingStatement = createIndexStmt */

break;
case 15:

/*	method := parsingStack.Pop().(string)
	on := parsingStack.Pop().(ast.ExpressionList)
	bucket := $$[$0-5].s
	pool := $$[$0-7].s
	name := $$[$0-10].s
	createIndexStmt := ast.NewCreateIndexStatement()
	createIndexStmt.On = on
	createIndexStmt.Pool = pool
	createIndexStmt.Bucket = bucket
	createIndexStmt.Name = name
	createIndexStmt.Method = method
	createIndexStmt.Primary = false
	parsingStatement = createIndexStmt */

break;
case 16:

  yy.pStack.push('view');

break;
case 17:

  yy.pStack.push($$[$0]);

break;
case 18:

/*	bucket := $$[$0-2].s
	name := $$[$0].s
	dropIndexStmt := ast.NewDropIndexStatement()
	dropIndexStmt.Bucket = bucket
	dropIndexStmt.Name = name
	parsingStatement = dropIndexStmt */

break;
case 19:

/*	bucket := $$[$0-2].s
	pool := $$[$0-4].s
	name := $$[$0].s
	dropIndexStmt := ast.NewDropIndexStatement()
	dropIndexStmt.Pool = pool
	dropIndexStmt.Bucket = bucket
	dropIndexStmt.Name = name
	parsingStatement = dropIndexStmt */

break;
case 20:

	yy.logDebugGrammar("SELECT_STMT")

break;
case 21:

	// future extensibility for comining queries with UNION, etc
	yy.logDebugGrammar("SELECT_COMPOUND")

break;
case 22: case 23:

	yy.logDebugGrammar("SELECT_CORE")

break;
case 25:

  var group_by = yy.pStack.pop();
  if (yy.pStmt instanceof ast.SelectStatement) {
    yy.pStmt.GroupBy = group_by;
  } else {
    yy.logDebugGrammar("This statement does not support GROUP BY");
  }

break;
case 27:

	yy.logDebugGrammar("SELECT HAVING - EXPR")
	var having_part = yy.pStack.pop();
	if (yy.pStmt instanceof ast.SelectStatement) {
	  yy.pStmt.Having = having_part;
  } else {
	  yy.logDebugGrammar("This statement does not support HAVING");
	}

break;
case 28:

	yy.logDebugGrammar("SELECT_SELECT")

break;
case 29:

	yy.logDebugGrammar("SELECT_SELECT_HEAD")

break;
case 31:

/* empty */

break;
case 32:

	yy.logDebugGrammar("SELECT_SELECT_QUALIFIER DISTINCT")
	if (yy.pStmt instanceof ast.SelectStatement) {
	  yy.pStmt.Distinct = true;
	} else {
	  yy.logDebugGrammar("This statement does not support WHERE");
	}

break;
case 33:

	yy.logDebugGrammar("SELECT_SELECT_QUALIFIER UNIQUE")
	if (yy.pStmt instanceof ast.SelectStatement) {
	  yy.pStmt.Distinct = true;
	} else {
	  yy.logDebugGrammar("This statement does not support WHERE");
	}

break;
case 34:

	yy.logDebugGrammar("SELECT SELECT TAIL - EXPR")
	var result_expr_list = yy.pStack.pop();
	if (yy.pStmt instanceof ast.SelectStatement) {
	  yy.pStmt.Select = result_expr_list;
	} else {
	  yy.logDebugGrammar("This statement does not support WHERE");
	}

break;
case 35:

  var result_expr = yy.pStack.pop();
  yy.pStack.push(ast.newResultExpressionList(result_expr));

break;
case 36:

  var result_expr_list = yy.pStack.pop();
  var result_expr = yy.pStack.pop();
  result_expr_list.unshift(result_expr);
  yy.pStack.push(result_expr_list);

break;
case 37:

	yy.logDebugGrammar("RESULT STAR")

break;
case 38:

	yy.logDebugGrammar("RESULT EXPR")
	var expr_part = yy.pStack.pop();
	var result_expr = ast.newResultExpression(expr_part);
	yy.pStack.push(result_expr);

break;
case 39:

	yy.logDebugGrammar("RESULT EXPR AS ID")
	var expr_part = yy.pStack.pop();
	var result_expr = ast.newResultExpressionWithAlias(expr_part, $$[$0]);
	yy.pStack.push(result_expr);

break;
case 40:

	yy.logDebugGrammar("RESULT EXPR ID")
  var expr_part = yy.pStack.pop();
  var result_expr = ast.newResultExpressionWithAlias(expr_part, $$[$0]);
  yy.pStack.push(result_expr);

break;
case 41:

	yy.logDebugGrammar("STAR")
  var result_expr = ast.newStarResultExpression();
	yy.pStack.push(result_expr);

break;
case 42:

	yy.logDebugGrammar("PATH DOT STAR")
	var expr_part = yy.pStack.pop();
	var result_expr = ast.newDotStarResultExpression(expr_part);
	yy.pStack.push(result_expr);

break;
case 43:

	yy.logDebugGrammar("SELECT FROM - EMPTY")

break;
case 44:

	yy.logDebugGrammar("SELECT FROM - DATASOURCE")
	var from = yy.pStack.pop();
	if (yy.pStmt instanceof ast.SelectStatement) {
	  yy.pStmt.From = from;
	} else {
	  yy.logDebugGrammar("This statement does not support FROM");
	}

break;
case 45: case 47:

	yy.logDebugGrammar("SELECT FROM - DATASOURCE WITH POOL")
	var from = yy.pStack.pop();
	from.Pool = $$[$0-2];
  if (yy.pStmt instanceof ast.SelectStatement) {
    yy.pStmt.From = from;
  } else {
    yy.logDebugGrammar("This statement does not support FROM");
  }

break;
case 46:

	yy.logDebugGrammar("SELECT FROM - DATASOURCE ")
	var from = yy.pStack.pop();
  if (yy.pStmt instanceof ast.SelectStatement) {
    yy.pStmt.From = from;
  } else {
    yy.logDebugGrammar("This statement does not support FROM");
  }

break;
case 48:

	yy.logDebugGrammar("FROM DATASOURCE WITHOUT UNNEST")

break;
case 49:

	yy.logDebugGrammar("FROM DATASOURCE WITH UNNEST")
	var rest = yy.pStack.pop();
	var last = yy.pStack.pop();
	last.Over = rest;
	yy.pStack.push(last);

break;
case 50:

    yy.logDebugGrammar("UNNEST")
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Project: proj, As:''}));

break;
case 51: case 52:

    yy.logDebugGrammar("UNNEST AS")
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As:$$[$0]}));

break;
case 53:

    yy.logDebugGrammar("UNNEST nested")
    var rest = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: '', Over: rest}));

break;
case 54: case 55:

    yy.logDebugGrammar("UNNEST AS nested")
    var rest = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-1], Over: rest}));

break;
case 56:

    yy.logDebugGrammar("UNNEST")
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: '', Type: Type}));

break;
case 57: case 58:

    yy.logDebugGrammar("UNNEST AS")
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, Type: Type, As: $$[$0]}));

break;
case 59:

    yy.logDebugGrammar("UNNEST nested")
    var rest = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, Type: Type, As: '', Over: rest}));

break;
case 60: case 61:

    yy.logDebugGrammar("UNNEST AS nested")
    var rest = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, Type: Type, As: $$[$0-1], Over: rest}));

break;
case 62:

    yy.logDebugGrammar("UNNEST KEY_EXPR")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: '', Type: Type, Keys: key_expr}));

break;
case 63: case 64:

    yy.logDebugGrammar("UNNEST KEY_EXPR")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-1], Type: Type, Keys: key_expr}));

break;
case 65:

    yy.logDebugGrammar("UNNEST KEY_EXPR")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: '', Type: Type, Keys: key_expr, Over: rest}));

break;
case 66: case 67:

    yy.logDebugGrammar("UNNEST KEY_EXPR")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-2], Type: Type, Keys: key_expr, Over: rest}));

break;
case 68:

    yy.logDebugGrammar("JOIN KEY")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: '', Keys: key_expr}));

break;
case 69: case 70:

    yy.logDebugGrammar("JOIN AS KEY")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-1], Keys: key_expr}));

break;
case 71:

    yy.logDebugGrammar("JOIN KEY NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: '', Keys: key_expr, Over: rest}));

break;
case 72: case 73:

    yy.logDebugGrammar("JOIN AS KEY NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-2], Keys: key_expr, Over: rest}));

break;
case 74:

    yy.logDebugGrammar("TYPE JOIN KEY")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: '', Type: Type, Keys: key_expr}));


break;
case 75:

    yy.logDebugGrammar("TYPE JOIN KEY NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: '', Type: Type, Keys: key_expr, Over: rest}));

break;
case 76:

    yy.logDebugGrammar("TYPE JOIN KEY IDENTIFIER")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-1], Type: Type, Keys: key_expr}));


break;
case 77:

    yy.logDebugGrammar("TYPE JOIN KEY IDENTIFIER NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-2], Type: Type, Keys: key_expr, Over: rest}));

break;
case 78:

    yy.logDebugGrammar("TYPE JOIN KEY AS IDENTIFIER")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-1], Type: Type, Keys: key_expr}));

break;
case 79:

    yy.logDebugGrammar("TYPE JOIN KEY AS IDENTIFIER NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-2], Type: Type, Keys: key_expr, Over: rest}));

break;
case 80:

    yy.logDebugGrammar("JOIN KEY")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, Oper: 'NEST', As: '', Keys: key_expr}));

break;
case 81: case 82:

    yy.logDebugGrammar("JOIN AS KEY")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, Oper: 'NEST', As: $$[$0-1], Keys: key_expr}));

break;
case 83:

    yy.logDebugGrammar("JOIN KEY NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, Oper: 'NEST', As: '', Keys: key_expr, Over: rest}));

break;
case 84: case 85:

    yy.logDebugGrammar("JOIN AS KEY NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, Oper: 'NEST', As: $$[$0-2], Keys: key_expr, Over: rest}));

break;
case 86:

    yy.logDebugGrammar("TYPE JOIN KEY")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, Oper: 'NEST', As: '', Type: Type, Keys: key_expr}));


break;
case 87:

    yy.logDebugGrammar("TYPE JOIN KEY NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: '', Oper: 'NEST', Type: Type, Keys: key_expr, Over: rest}));

break;
case 88:

    yy.logDebugGrammar("TYPE JOIN KEY IDENTIFIER")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-1], Oper: 'NEST', Type: Type, Keys: key_expr}));


break;
case 89:

    yy.logDebugGrammar("TYPE JOIN KEY IDENTIFIER NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-2], Oper: 'NEST', Type: Type, Keys: key_expr, Over: rest}));

break;
case 90:

    yy.logDebugGrammar("TYPE JOIN KEY AS IDENTIFIER")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-1], Oper: 'NEST', Type: Type, Keys: key_expr}));

break;
case 91:

    yy.logDebugGrammar("TYPE JOIN KEY AS IDENTIFIER NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-2], Oper: 'NEST', Type: Type, Keys: key_expr, Over: rest}));

break;
case 92:

        yy.logDebugGrammar("FROM JOIN DATASOURCE with KEY")
        var key = yy.pStack.pop();
        var key_expr = ast.newKeyExpression(key, 'KEY');
        yy.pStack.push(key_expr);

break;
case 93:

        yy.logDebugGrammar("FROM DATASOURCE with KEYS")
        var keys = yy.pStack.pop();
        var key_expr = ast.newKeyExpression(keys, 'KEYS');
        yy.pStack.push(key_expr);


break;
case 94:

    yy.logDebugGrammar("INNER")
    yy.pStack.push('INNER');

break;
case 95:

    yy.logDebugGrammar("OUTER")
    yy.pStack.push('LEFT');

break;
case 96:

    yy.logDebugGrammar("LEFT OUTER")
    yy.pStack.push('LEFT');

break;
case 97:

	yy.logDebugGrammar("FROM DATASOURCE")
	var proj = yy.pStack.pop();
	yy.pStack.push(new ast.From({Projection: proj}));

break;
case 98:

    yy.logDebugGrammar("FROM KEY(S) DATASOURCE")
	  var proj = yy.pStack.pop();
	  yy.pStack.push(new ast.From({Projection: proj}));

break;
case 99:

    // fixme support over as
	yy.logDebugGrammar("FROM DATASOURCE AS ID")
	var proj = yy.pStack.pop();
	yy.pStack.push(new ast.From({Projection: proj, As: $$[$0]}));

break;
case 100:

    // fixme support over as
	yy.logDebugGrammar("FROM DATASOURCE ID")
	var proj = yy.pStack.pop();
	yy.pStack.push(new ast.From({Projection: proj, As: $$[$0]}));

break;
case 101:

        yy.logDebugGrammar("FROM DATASOURCE AS ID KEY(S)")
	var proj = yy.pStack.pop();
	yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-1]}));


break;
case 102:

        yy.logDebugGrammar("FROM DATASOURCE ID KEY(s)")
	var proj = yy.pStack.pop();
	yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-1]}));


break;
case 103:

        yy.logDebugGrammar("FROM DATASOURCE with KEY")
  var keys = yy.pStack.pop();
  if (yy.pStmt instanceof ast.SelectStatement) {
    yy.pStmt.Keys = ast.newKeyExpression(keys, 'KEY');
  } else {
    yy.logDebugGrammar("This statement does not support KEY");
  }

break;
case 104:

        yy.logDebugGrammar("FROM DATASOURCE with KEYS")
  var keys = yy.pStack.pop();
  if (yy.pStmt instanceof ast.SelectStatement) {
    yy.pStmt.Keys = ast.newKeyExpression(keys, 'KEYS');
  } else {
    yy.logDebugGrammar("This statement does not support KEYS");
  }

break;
case 105:

	yy.logDebugGrammar("SELECT WHERE - EMPTY")

break;
case 106:

	yy.logDebugGrammar("SELECT WHERE - EXPR")
	var where_part = yy.pStack.pop();
	if (yy.pStmt instanceof ast.SelectStatement) {
	  yy.pStmt.Where = where_part;
	} else {
	  yy.logDebugGrammar("This statement does not support WHERE");
	}

break;
case 108: case 109: case 110: case 114: case 115: case 116: case 154: case 157:



break;
case 111:

	yy.logDebugGrammar("SORT EXPR")
  var expr = yy.pStack.pop();
  if (yy.pStmt instanceof ast.SelectStatement) {
    yy.pStmt.OrderBy.push(ast.newSortExpression(expr, true));
  } else {
    yy.logDebugGrammar("This statement does not support ORDER BY");
  }

break;
case 112:

	yy.logDebugGrammar("SORT EXPR ASC")
  var expr = yy.pStack.pop();
  if (yy.pStmt instanceof ast.SelectStatement) {
    yy.pStmt.OrderBy.push(ast.newSortExpression(expr, true));
  } else {
    yy.logDebugGrammar("This statement does not support ORDER BY");
  }

break;
case 113:

	yy.logDebugGrammar("SORT EXPR DESC")
  var expr = yy.pStack.pop();
  if (yy.pStmt instanceof ast.SelectStatement) {
    yy.pStmt.OrderBy.push(ast.newSortExpression(expr, false));
  } else {
    yy.logDebugGrammar("This statement does not support ORDER BY");
  }

break;
case 117:

	yy.logDebugGrammar("LIMIT %d", $$[$0]);
	if ($$[$0] < 0) {
	  throw new Error('LIMIT cannot be negative');
	}
	if (yy.pStmt instanceof ast.SelectStatement) {
	  yy.pStmt.Limit = $$[$0];
	} else {
	  yy.logDebugGrammar("This statement does not support LIMIT");
	}

break;
case 118:

	yy.logDebugGrammar("OFFSET %d", $$[$0])
	if ($$[$0] < 0) {
	  throw new Error('OFFSET cannot be negative');
	}
	if (yy.pStmt instanceof ast.SelectStatement) {
	  yy.pStmt.Offset = $$[$0];
	} else {
	  yy.logDebugGrammar("This statement does not support OFFSET");
	}

break;
case 119:

	yy.logDebugGrammar("EXPRESSION")

break;
case 120:

    yy.logDebugGrammar(" BETWEEN EXPRESSION")
    var high = yy.pStack.pop();
    var low = yy.pStack.pop();
    var element = yy.pStack.pop();
    var leftExpression = ast.newGreaterThanOrEqualOperator(element, low);
    var rightExpression = ast.newLessThanOrEqualOperator(element, high);
    var thisExpression = ast.newAndOperator(new ast.ExpressionList(leftExpression, rightExpression));
    yy.pStack.push(thisExpression);

break;
case 121:

    yy.logDebugGrammar(" BETWEEN EXPRESSION")
    var high = yy.pStack.pop();
    var low = yy.pStack.pop();
    var element = yy.pStack.pop();
    var leftExpression = ast.newLessThanOperator(element, low);
    var rightExpression = ast.newGreaterThanOperator(element, high);
    var thisExpression = ast.newOrOperator(new ast.ExpressionList(leftExpression, rightExpression));
    yy.pStack.push(thisExpression);

break;
case 122:

    yy.logDebugGrammar(" IN expression ")
    var right = yy.pStack.pop();
    var left = yy.pStack.pop();
    var thisExpression = ast.newInOperator(left, right);
    yy.pStack.push(thisExpression);

break;
case 123:

    yy.logDebugGrammar(" IN expression ")
    var right = yy.pStack.pop();
    var left = yy.pStack.pop();
    var thisExpression = ast.newNotInOperator(left, right);
    yy.pStack.push(thisExpression);

break;
case 125:

    yy.logDebugGrammar("sub-query EXPRESSION")


break;
case 126:

    yy.logDebugGrammar("sub-query NESTED EXPRESSION")

break;
case 127:

	yy.logDebugGrammar("EXPR - PLUS")
  var right = yy.pStack.pop();
  var left = yy.pStack.pop();
  var thisExpression = ast.newPlusOperator(left, right);
  yy.pStack.push(thisExpression);

break;
case 128:

	yy.logDebugGrammar("EXPR - MINUS")
  var right = yy.pStack.pop();
  var left = yy.pStack.pop();
  var thisExpression = ast.newSubtractOperator(left, right);
  yy.pStack.push(thisExpression);

break;
case 129:

	yy.logDebugGrammar("EXPR - MULT")
  var right = yy.pStack.pop();
  var left = yy.pStack.pop();
  var thisExpression = ast.newMultiplyOperator(left, right);
  yy.pStack.push(thisExpression);

break;
case 130:

	yy.logDebugGrammar("EXPR - DIV")
  var right = yy.pStack.pop();
  var left = yy.pStack.pop();
  var thisExpression = ast.newDivideOperator(left, right);
  yy.pStack.push(thisExpression);

break;
case 131:

	yy.logDebugGrammar("EXPR - MOD")
  var right = yy.pStack.pop();
  var left = yy.pStack.pop();
  var thisExpression = ast.newModuloOperator(left, right);
  yy.pStack.push(thisExpression);

break;
case 132:

	yy.logDebugGrammar("EXPR - CONCAT")
	// TODO: Implement This!
	/*right := parsingStack.Pop()
	left := parsingStack.Pop()
	thisExpression := ast.NewStringConcatenateOperator(left.(ast.Expression), right.(ast.Expression))
	parsingStack.Push(thisExpression)*/

break;
case 133:

	yy.logDebugGrammar("EXPR - AND")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newAndOperator(new ast.ExpressionList(left, right));
	yy.pStack.push(thisExpression);

break;
case 134:

	yy.logDebugGrammar("EXPR - OR")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newOrOperator(new ast.ExpressionList(left, right));
	yy.pStack.push(thisExpression);

break;
case 135:

	yy.logDebugGrammar("EXPR - EQ")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newEqualToOperator(left, right);
	yy.pStack.push(thisExpression);

break;
case 136:

	yy.logDebugGrammar("EXPR - LT")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newLessThanOperator(left, right);
	yy.pStack.push(thisExpression);

break;
case 137:

	yy.logDebugGrammar("EXPR - LTE")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newLessThanOrEqualOperator(left, right);
	yy.pStack.push(thisExpression);

break;
case 138:

	yy.logDebugGrammar("EXPR - GT")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newGreaterThanOperator(left, right);
	yy.pStack.push(thisExpression);

break;
case 139:

	yy.logDebugGrammar("EXPR - GTE")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newGreaterThanOrEqualOperator(left, right);
	yy.pStack.push(thisExpression);

break;
case 140:

	yy.logDebugGrammar("EXPR - NE")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newNotEqualToOperator(left, right);
	yy.pStack.push(thisExpression);

break;
case 141:

	yy.logDebugGrammar("EXPR - LIKE")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newLikeOperator(left, right);
	yy.pStack.push(thisExpression);

break;
case 142:

	yy.logDebugGrammar("EXPR - NOT LIKE")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newNotLikeOperator(left, right);
	yy.pStack.push(thisExpression);


break;
case 143:

	yy.logDebugGrammar("EXPR DOT MEMBER")
	var right = ast.newProperty($$[$0]);
	var left = yy.pStack.pop();
	var thisExpression = ast.newDotMemberOperator(left, right);
	yy.pStack.push(thisExpression);

break;
case 144:

	yy.logDebugGrammar("EXPR BRACKET MEMBER")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newBracketMemberOperator(left, right);
	yy.pStack.push(thisExpression);

break;
case 145:

    yy.logDebugGrammar("EXPR COLON EXPR SLICE BRACKET MEMBER")
    throw new Error('not_yet_supported');
    /*left := parsingStack.Pop()
    thisExpression := ast.NewBracketSliceMemberOperator(left.(ast.Expression), ast.NewLiteralNumber(float64($$[$0-3].n)), ast.NewLiteralNumber(float64($$[$0-1].n)))
    parsingStack.Push(thisExpression)*/

break;
case 146:

    yy.logDebugGrammar("EXPR COLON SLICE BRACKET MEMBER")
    throw new Error('not_yet_supported');
    /*left := parsingStack.Pop()
    thisExpression := ast.NewBracketSliceMemberOperator(left.(ast.Expression), ast.NewLiteralNumber(float64($$[$0-2].n)), ast.NewLiteralNumber(float64(0)))
    parsingStack.Push(thisExpression)*/


break;
case 147:

    yy.logDebugGrammar("COLON EXPR SLICE BRACKET MEMBER")
    throw new Error('not_yet_supported');
    /*left := parsingStack.Pop()
    thisExpression := ast.NewBracketSliceMemberOperator(left.(ast.Expression), ast.NewLiteralNumber(float64(0)), ast.NewLiteralNumber(float64($$[$0-1].n)))
    parsingStack.Push(thisExpression)*/

break;
case 148:

	yy.logDebugGrammar("SUFFIX_EXPR IS NULL")
	var operand = yy.pStack.pop();
	var thisExpression = ast.newIsNullOperator(operand);
	yy.pStack.push(thisExpression);

break;
case 149:

	yy.logDebugGrammar("SUFFIX_EXPR IS NOT NULL")
	var operand = yy.pStack.pop();
	var thisExpression = ast.newIsNotNullOperator(operand);
	yy.pStack.push(thisExpression);

break;
case 150:

	yy.logDebugGrammar("SUFFIX_EXPR IS MISSING")
	var operand = yy.pStack.pop();
	var thisExpression = ast.newIsMissingOperator(operand);
	yy.pStack.push(thisExpression);

break;
case 151:

	yy.logDebugGrammar("SUFFIX_EXPR IS NOT MISSING")
	var operand = yy.pStack.pop();
	var thisExpression = ast.newIsNotMissingOperator(operand);
	yy.pStack.push(thisExpression);

break;
case 152:

	yy.logDebugGrammar("SUFFIX_EXPR IS VALUED")
	var operand = yy.pStack.pop();
	var thisExpression = ast.newIsValuedOperator(operand);
	yy.pStack.push(thisExpression);

break;
case 153:

	yy.logDebugGrammar("SUFFIX_EXPR IS NOT VALUED")
	var operand = yy.pStack.pop();
	var thisExpression = ast.newIsNotValuedOperator(operand);
	yy.pStack.push(thisExpression);

break;
case 155:

	yy.logDebugGrammar("EXPR - NOT")
	var operand = yy.pStack.pop();
	var thisExpression = ast.newNotOperator(operand);
	yy.pStack.push(thisExpression);

break;
case 156:

	yy.logDebugGrammar("EXPR - CHANGE SIGN")
	var operand = yy.pStack.pop();
	var thisExpression = ast.newChangeSignOperator(operand);
	yy.pStack.push(thisExpression);

break;
case 158:

	yy.logDebugGrammar("SUFFIX_EXPR")

break;
case 159:

	yy.logDebugGrammar("IDENTIFIER - %s", $$[$0].s)
	var thisExpression = ast.newProperty($$[$0]);
	yy.pStack.push(thisExpression);

break;
case 160:

	yy.logDebugGrammar("LITERAL")

break;
case 161:

	yy.logDebugGrammar("NESTED EXPR")

break;
case 162:

	yy.logDebugGrammar("CASE WHEN THEN ELSE END")
	throw new Error('not_yet_supported');
	/*cwtee := ast.NewCaseOperator()
	topStack := parsingStack.Pop()
	switch topStack := topStack.(type) {
	case ast.Expression:
		cwtee.Else = topStack
		// now look for whenthens
		nextStack := parsingStack.Pop().([]*ast.WhenThen)
		cwtee.WhenThens = nextStack
	case []*ast.WhenThen:
		// no else
		cwtee.WhenThens = topStack
	}
	parsingStack.Push(cwtee)*/

break;
case 163:

	yy.logDebugGrammar("CASE WHEN THEN ELSE END")
	throw new Error('not_yet_supported');
	/*cwtee := ast.NewCaseOperator()
	topStack := parsingStack.Pop()
	switch topStack := topStack.(type) {
	case ast.Expression:
		cwtee.Else = topStack
		// now look for whenthens
		nextStack := parsingStack.Pop().([]*ast.WhenThen)
		cwtee.WhenThens = nextStack
	case []*ast.WhenThen:
		// no else
		cwtee.WhenThens = topStack
	}
        cwtee.Switch = parsingStack.Pop().(ast.Expression)
	parsingStack.Push(cwtee)*/

break;
case 164:

    yy.logDebugGrammar("ANY SATISFIES")
    throw new Error('not_yet_supported');
    /*condition := parsingStack.Pop().(ast.Expression)
    sub := parsingStack.Pop().(ast.Expression)
    collectionAny := ast.NewCollectionAnyOperator(condition, sub, "")
    parsingStack.Push(collectionAny)*/

break;
case 165:

    yy.logDebugGrammar("ANY IN SATISFIES")
    throw new Error('not_yet_supported');
    /*condition := parsingStack.Pop().(ast.Expression)
    sub := parsingStack.Pop().(ast.Expression)
    collectionAny := ast.NewCollectionAnyOperator(condition, sub, $$[$0-5].s)
    parsingStack.Push(collectionAny)*/

break;
case 166:

    yy.logDebugGrammar("ANY IN SATISFIES")
    throw new Error('not_yet_supported');
    /*condition := parsingStack.Pop().(ast.Expression)
    sub := parsingStack.Pop().(ast.Expression)
    collectionAny := ast.NewCollectionAllOperator(condition, sub, $$[$0-5].s)
    parsingStack.Push(collectionAny)*/

break;
case 167:

    yy.logDebugGrammar("ANY SATISFIES")
    throw new Error('not_yet_supported');
    /*condition := parsingStack.Pop().(ast.Expression)
    sub := parsingStack.Pop().(ast.Expression)
    collectionAny := ast.NewCollectionAllOperator(condition, sub, "")
    parsingStack.Push(collectionAny)*/

break;
case 168:

	yy.logDebugGrammar("FIRST FOR IN WHEN")
	throw new Error('not_yet_supported');
	/*condition := parsingStack.Pop().(ast.Expression)
	sub := parsingStack.Pop().(ast.Expression)
	output := parsingStack.Pop().(ast.Expression)
	collectionFirst := ast.NewCollectionFirstOperator(condition, sub, $$[$0-5].s, output)
	parsingStack.Push(collectionFirst)*/

break;
case 169:

	yy.logDebugGrammar("FIRST IN WHEN")
	throw new Error('not_yet_supported');
	/*condition := parsingStack.Pop().(ast.Expression)
	sub := parsingStack.Pop().(ast.Expression)
	output := parsingStack.Pop().(ast.Expression)
	collectionFirst := ast.NewCollectionFirstOperator(condition, sub, "", output)
	parsingStack.Push(collectionFirst)*/

break;
case 170:

	yy.logDebugGrammar("FIRST FOR IN")
	throw new Error('not_yet_supported');
	/*sub := parsingStack.Pop().(ast.Expression)
	output := parsingStack.Pop().(ast.Expression)
	collectionFirst := ast.NewCollectionFirstOperator(nil, sub, $$[$0-3].s, output)
	parsingStack.Push(collectionFirst)*/

break;
case 171:

	yy.logDebugGrammar("FIRST IN")
	throw new Error('not_yet_supported');
	/*sub := parsingStack.Pop().(ast.Expression)
	output := parsingStack.Pop().(ast.Expression)
	collectionFirst := ast.NewCollectionFirstOperator(nil, sub, "", output)
	parsingStack.Push(collectionFirst)*/

break;
case 172:

	yy.logDebugGrammar("ARRAY FOR IN WHEN")
	throw new Error('not_yet_supported');
	/*condition := parsingStack.Pop().(ast.Expression)
	sub := parsingStack.Pop().(ast.Expression)
	output := parsingStack.Pop().(ast.Expression)
	collectionArray := ast.NewCollectionArrayOperator(condition, sub, $$[$0-5].s, output)
	parsingStack.Push(collectionArray)*/

break;
case 173:

	yy.logDebugGrammar("ARRAY IN WHEN")
	throw new Error('not_yet_supported');
	/*condition := parsingStack.Pop().(ast.Expression)
	sub := parsingStack.Pop().(ast.Expression)
	output := parsingStack.Pop().(ast.Expression)
	collectionArray := ast.NewCollectionArrayOperator(condition, sub, "", output)
	parsingStack.Push(collectionArray)*/

break;
case 174:

	yy.logDebugGrammar("ARRAY FOR IN")
	throw new Error('not_yet_supported');
	/*sub := parsingStack.Pop().(ast.Expression)
	output := parsingStack.Pop().(ast.Expression)
	collectionArray := ast.NewCollectionArrayOperator(nil, sub, $$[$0-3].s, output)
	parsingStack.Push(collectionArray)*/

break;
case 175:

	yy.logDebugGrammar("ARRAY IN")
	throw new Error('not_yet_supported');
	/*sub := parsingStack.Pop().(ast.Expression)
	output := parsingStack.Pop().(ast.Expression)
	collectionArray := ast.NewCollectionArrayOperator(nil, sub, "", output)
	parsingStack.Push(collectionArray)*/

break;
case 176:

	yy.logDebugGrammar("FUNCTION EXPR NOPARAM")
	var thisExpression = ast.newFunctionCall($$[$0-2], new ast.FunctionArgExpressionList());
	yy.pStack.push(thisExpression);

break;
case 177:

	yy.logDebugGrammar("FUNCTION EXPR PARAM")
	var funarg_exp_list = yy.pStack.pop();
	var thisExpression = ast.newFunctionCall($$[$0-3], funarg_exp_list);
	yy.pStack.push(thisExpression);

break;
case 178:

	yy.logDebugGrammar("FUNCTION DISTINCT EXPR PARAM")
	var funarg_exp_list = yy.pStack.pop();
	var thisFunction = ast.newFunctionCall($$[$0-4], funarg_exp_list);
	thisFunction.Distinct = true;
	yy.pStack.push(thisFunction);

break;
case 179:

	yy.logDebugGrammar("FUNCTION EXPR PARAM")
	var funarg_exp_list = yy.pStack.pop();
	var thisExpression = ast.newFunctionCall($$[$0-4], funarg_exp_list);
	yy.pStack.push(thisExpression);

break;
case 180:

	yy.logDebugGrammar("THEN_LIST - SINGLE")
	throw new Error('not_yet_supported');
	/*when_then_list := make([]*ast.WhenThen, 0)
	when_then := ast.WhenThen{Then: parsingStack.Pop().(ast.Expression), When: parsingStack.Pop().(ast.Expression)}
	when_then_list = append(when_then_list, &when_then)
	parsingStack.Push(when_then_list)*/

break;
case 181:

	yy.logDebugGrammar("THEN_LIST - COMPOUND")
	throw new Error('not_yet_supported');
	/*rest := parsingStack.Pop().([]*ast.WhenThen)
	last := ast.WhenThen{Then: parsingStack.Pop().(ast.Expression), When: parsingStack.Pop().(ast.Expression)}
	new_list := make([]*ast.WhenThen, 0, len(rest) + 1)
	new_list = append(new_list, &last)
	for _, v := range rest {
		new_list = append(new_list, v)
	}
	parsingStack.Push(new_list)*/

break;
case 182:

	yy.logDebugGrammar("ELSE - EMPTY")

break;
case 183:

	yy.logDebugGrammar("ELSE - EXPR")

break;
case 184:

	yy.logDebugGrammar("PATH - %v", $$[$0])
	var thisExpression = ast.newProperty($$[$0]);
	yy.pStack.push(thisExpression);

break;
case 185:

	yy.logDebugGrammar("PATH BRACKET - %v[%v]", $$[$0-3], $$[$0-1])
	var left = yy.pStack.pop();
	var thisExpression = ast.newBracketMemberOperator(left, ast.newLiteralNumber($$[$0-1]));
	yy.pStack.push(thisExpression);

break;
case 186:

    yy.logDebugGrammar("PATH SLICE BRACKET MEMBER - %v[%v-%v]", $$[$0-5],$$[$0-3], $$[$0-1])
    throw new Error('not_yet_supported');
    /*left := parsingStack.Pop()
    thisExpression := ast.NewBracketSliceMemberOperator(left.(ast.Expression), ast.NewLiteralNumber(float64($$[$0-3].n)), ast.NewLiteralNumber(float64($$[$0-1].n)))
    parsingStack.Push(thisExpression)*/

break;
case 187:

    yy.logDebugGrammar("PATH SLICE BRACKET MEMBER - %v[%v:]", $$[$0-4], $$[$0-2])
    throw new Error('not_yet_supported');
    /*left := parsingStack.Pop()
    thisExpression := ast.NewBracketSliceMemberOperator(left.(ast.Expression), ast.NewLiteralNumber(float64($$[$0-2].n)), ast.NewLiteralNumber(float64(0)))
    parsingStack.Push(thisExpression)*/


break;
case 188:

    yy.logDebugGrammar("PATH SLICE BRACKET MEMBER -%v[:%v]", $$[$0-4], $$[$0-1])
    throw new Error('not_yet_supported');
    /*left := parsingStack.Pop()
    thisExpression := ast.NewBracketSliceMemberOperator(left.(ast.Expression), ast.NewLiteralNumber(float64(0)), ast.NewLiteralNumber(float64($$[$0-1].n)))
    parsingStack.Push(thisExpression)*/

break;
case 189:

	yy.logDebugGrammar("PATH DOT PATH - $$[$0-2]")
	var right = ast.newProperty($$[$0]);
	var left = yy.pStack.pop();
	var thisExpression = ast.newDotMemberOperator(left, right);
	yy.pStack.push(thisExpression);

break;
case 190:

  var funarg_expr = yy.pStack.pop();
  yy.pStack.push(new ast.FunctionArgExpressionList(funarg_expr));

break;
case 191:

  var funarg_expr_list = yy.pStack.pop();
  var funarg_expr = yy.pStack.pop();
  funarg_expr_list.unshift(funarg_expr);
  yy.pStack.push(funarg_expr_list);

break;
case 192:

	yy.logDebugGrammar("FUNARG STAR")

break;
case 193:

	yy.logDebugGrammar("FUNARG EXPR")
	var expr_part = yy.pStack.pop();
	var funarg_expr = ast.newFunctionArgExpression(expr_part);
	yy.pStack.push(funarg_expr);

break;
case 194:

	yy.logDebugGrammar("FUNSTAR")
	var funarg_expr = ast.newStarFunctionArgExpression();
	yy.pStack.push(funarg_expr);

break;
case 195:

	yy.logDebugGrammar("FUN PATH DOT STAR")
	var expr_part = yy.pStack.pop();
	var funarg_expr = ast.newDotStarFunctionArgExpression(expr_part);
	yy.pStack.push(funarg_expr);

break;
case 196:

	yy.logDebugGrammar("STRING %s", $$[$0]);
	var thisExpression = ast.newLiteralString($$[$0]);
	yy.pStack.push(thisExpression);

break;
case 197:

	yy.logDebugGrammar("NUMBER")

break;
case 198: case 206:

	yy.logDebugGrammar("OBJECT")

break;
case 199:

	yy.logDebugGrammar("ARRAY")

break;
case 200:

	yy.logDebugGrammar("TRUE")
	var thisExpression = ast.newLiteralBool(true);
	yy.pStack.push(thisExpression);

break;
case 201:

	yy.logDebugGrammar("FALSE")
	var thisExpression = ast.newLiteralBool(false);
	yy.pStack.push(thisExpression);

break;
case 202:

	yy.logDebugGrammar("NULL")
	var thisExpression = ast.newLiteralNull();
	yy.pStack.push(thisExpression);

break;
case 203:

	yy.logDebugGrammar("NUMBER %d", $$[$0])
	var thisExpression = ast.newLiteralNumber($$[$0]);
	yy.pStack.push(thisExpression);

break;
case 204:

	yy.logDebugGrammar("NUMBER %f", $$[$0])
	var thisExpression = ast.newLiteralNumber($$[$0]);
	yy.pStack.push(thisExpression);

break;
case 205:

	yy.logDebugGrammar("EMPTY OBJECT")
	throw new Error('not_yet_supported');
	/*emptyObject := ast.NewLiteralObject(map[string]ast.Expression{})
	parsingStack.Push(emptyObject)*/

break;
case 207:

	yy.logDebugGrammar("NAMED EXPR LIST SINGLE")

break;
case 208:

	yy.logDebugGrammar("NAMED EXPR LIST COMPOUND")
	throw new Error('not_yet_supported');
	/*last := parsingStack.Pop().(*ast.LiteralObject)
	rest := parsingStack.Pop().(*ast.LiteralObject)
	for k,v := range last.Val {
		rest.Val[k] = v
	}
	parsingStack.Push(rest)*/

break;
case 209:

	yy.logDebugGrammar("NAMED EXPR SINGLE")
	throw new Error('not_yet_supported');
	/*thisKey := $$[$0-2].s
	thisValue := parsingStack.Pop().(ast.Expression)
	thisExpression := ast.NewLiteralObject(map[string]ast.Expression{thisKey: thisValue})
	parsingStack.Push(thisExpression)*/

break;
case 210:

	yy.logDebugGrammar("EMPTY ARRAY")
	throw new Error('not_yet_supported');
	/*thisExpression := ast.NewLiteralArray(ast.ExpressionList{})
	parsingStack.Push(thisExpression)*/

break;
case 211:

	yy.logDebugGrammar("ARRAY")
	throw new Error('not_yet_supported');
	/*exp_list := parsingStack.Pop().(ast.ExpressionList)
	thisExpression := ast.NewLiteralArray(exp_list)
	parsingStack.Push(thisExpression)*/

break;
case 212:

	yy.logDebugGrammar("EXPRESSION LIST SINGLE")
	var exp_list = new ast.ExpressionList();
	exp_list.push(yy.pStack.pop());
	yy.pStack.push(exp_list);

break;
case 213:

	yy.logDebugGrammar("EXPRESSION LIST COMPOUND")
	// TODO: This may be incorrectly ordered
	var rest = yy.pStack.pop();
	var last = yy.pStack.pop();
	rest.unshift(last);
	yy.pStack.push(rest);

break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:8,10:9,11:$V0,24:$V1,25:7,26:11,29:13,33:14,39:15,42:$V2,53:$V3},{1:[3]},{1:[2,1]},{4:18,6:4,7:5,8:6,9:8,10:9,11:$V0,24:$V1,25:7,26:11,29:13,33:14,39:15,42:$V2,53:$V3},{1:[2,3]},{1:[2,4]},{1:[2,5]},o($V4,[2,20]),{1:[2,6]},{1:[2,7]},{13:[1,19]},o($V5,[2,107],{27:20,70:[1,21]}),{12:[1,22],13:[1,23]},o($V6,[2,43],{30:24,53:[1,25]}),o([34,42],$V7,{31:26,69:$V8}),o($V9,[2,30],{40:28,43:[1,29],44:[1,30],45:[1,31]}),{15:$Va,16:[1,33],54:32,55:34,58:35},o([15,20,43,44,45,51,78,82,85,88,100,103,110,115,117,118,120,126,130,131,132],[2,29]),{1:[2,2]},{15:[1,37],16:[1,38]},o($V4,[2,114],{28:39,75:40,77:[1,41]}),{35:[1,42]},{13:[1,43]},{15:[1,44]},o([1,34,70,77,86],$V7,{31:45,69:$V8}),{15:$Va,16:[1,47],54:46,55:34,58:35},{32:48,34:$Vb,42:$Vc},{15:$Vd,20:$Ve,38:50,52:51,78:$Vf,82:$Vg,84:52,85:$Vh,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,38:81,41:77,46:78,47:79,49:80,51:$Vu,52:83,78:$Vf,82:$Vg,84:52,85:$Vh,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},o($V9,[2,31]),o($V9,[2,32]),o($V9,[2,33]),o($Vv,[2,46]),{15:[1,84]},o($Vw,[2,48],{56:85,59:87,57:$V4,61:$Vx,63:$Vy,66:$Vz,67:$VA}),o($VB,[2,97],{60:92,15:[1,94],17:$VC,50:[1,93],64:$VD,65:$VE,100:$VF}),o($VG,[2,184]),{17:[1,99]},{15:[1,100]},o($V4,[2,21]),o($V4,[2,115],{76:101,79:[1,102]}),{78:[1,103]},{15:$Vd,20:$Ve,38:106,52:51,71:104,72:105,78:$Vf,82:$Vg,84:52,85:$Vh,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{14:[1,107]},{14:[1,108]},o($VH,$Vc,{32:109,34:$Vb}),o($V6,[2,44]),{15:[1,110]},{29:111,39:15,42:$V2},{35:[1,112]},o([1,34,42,70,77,86],[2,106]),o($VI,$VJ,{17:$VK,51:$VL,80:$VM,81:$VN,82:$VO,83:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21}),o($VI,[2,124]),o($V31,[2,154]),{6:134,25:7,26:11,29:13,33:14,39:15,42:$V2,53:$V3,86:$V41,126:$V51,133:136,134:137},{15:$Vd,20:$Ve,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:139,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:141,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},o($V31,[2,157]),o($V31,[2,158]),o($V31,$V71,{20:$V81}),o($V31,[2,160]),{15:$Vd,20:$Ve,38:143,52:51,78:$Vf,82:$Vg,84:52,85:$Vh,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:145,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,111:[1,144],115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:[1,147],20:$Ve,52:146,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:[1,148],20:$Ve,52:149,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:150,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:151,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},o($V31,[2,196]),o($V31,[2,197]),o($V31,[2,198]),o($V31,[2,199]),o($V31,[2,200]),o($V31,[2,201]),o($V31,[2,202]),o($V31,$V91),o($V31,[2,204]),{15:$Vd,20:$Ve,21:153,38:154,52:51,78:$Vf,82:$Vg,84:52,85:$Vh,88:$Vi,100:$Vj,101:[1,152],103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},o($Va1,[2,28]),o($Va1,[2,34]),o($Va1,[2,35],{48:[1,155]}),o($Vb1,[2,37]),o($Vb1,[2,38],{15:[1,157],50:[1,156]}),o($Vb1,[2,41]),o([1,15,34,48,50,53,69,70,77,86],$VJ,{17:[1,158],51:$VL,80:$VM,81:$VN,82:$VO,83:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21}),{17:[1,159]},o($Vw,[2,49]),{15:$Va,58:160},{57:[1,161],61:[1,162],63:[1,163]},{15:$Va,58:164},{15:$Va,58:165},o($Vc1,[2,94]),o($Vc1,[2,95],{68:[1,166]}),o($VB,[2,98]),{15:[1,167]},o($VB,[2,100],{60:168,64:$VD,65:$VE}),{16:[1,170],78:[1,169]},{15:[1,171]},{15:$Vd,20:$Ve,52:172,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:173,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:[1,174]},{17:[1,175]},o($V4,[2,116]),{78:[1,176]},o([1,79,86],[2,117]),o($V5,[2,108]),o($V5,[2,109],{48:[1,177]}),o($Vd1,[2,111],{73:[1,178],74:[1,179]}),{15:[1,180],16:[1,181]},{15:[1,182],16:[1,183]},o($VH,[2,22]),{17:[1,184]},o($VH,[2,23]),{15:$Vd,20:$Ve,21:185,38:154,52:51,78:$Vf,82:$Vg,84:52,85:$Vh,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:186,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{80:[1,187],83:[1,188],99:$Ve1},{15:$Vd,20:$Ve,38:190,52:51,78:$Vf,82:$Vg,84:52,85:$Vh,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:191,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:192,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:193,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:194,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:195,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:196,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:197,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:198,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:199,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:200,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:201,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:202,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:203,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:204,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:205,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vf1},{15:$Vd,16:[1,209],20:$Ve,52:207,78:[1,208],82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{82:[1,211],103:[1,210],104:[1,212],105:[1,213]},{86:[1,214]},o($V31,[2,205]),{86:[1,215]},{48:[1,216],86:[2,207]},{16:[1,217]},o($V31,[2,155]),{86:$V41,126:$V51,133:136,134:137},o($V31,[2,156]),{15:$Vd,20:$Ve,22:[1,218],38:224,44:[1,220],45:[1,221],51:$Vg1,52:226,78:$Vf,82:$Vg,84:52,85:$Vh,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,121:219,124:222,125:223,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{22:[1,227]},{15:$Vd,20:$Ve,52:229,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,112:228,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,111:[1,230]},{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,116:[1,232]},o($Vi1,$V71,{20:$V81,83:[1,233]}),o($Vi1,$V71,{20:$V81,83:[1,234]}),{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,116:[1,235]},{17:$VK,51:$VL,81:$VN,82:$Vh1,83:[1,237],87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,119:[1,236]},{17:$VK,51:$VL,81:$VN,82:$Vh1,83:[1,239],87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,119:[1,238]},o($V31,[2,210]),{101:[1,240]},o($Vj1,[2,212],{48:[1,241]}),{15:$Vd,20:$Ve,38:81,46:242,47:79,49:80,51:$Vu,52:83,78:$Vf,82:$Vg,84:52,85:$Vh,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:[1,243]},o($Vb1,[2,40]),{15:$Vf1,51:[1,244]},{15:$Va,54:245,55:34,58:35},o($Vw,[2,50],{59:87,56:248,15:[1,247],17:$VC,50:[1,246],57:$V4,61:$Vx,63:$Vy,66:$Vz,67:$VA,100:$VF}),{15:$Va,58:249},{15:$Va,58:250},{15:$Va,58:251},{15:[1,254],17:$VC,50:[1,253],62:252,64:$Vk1,65:$Vl1,100:$VF},{15:[1,259],17:$VC,50:[1,258],62:257,64:$Vk1,65:$Vl1,100:$VF},o($Vc1,[2,96]),o($VB,[2,99],{60:260,64:$VD,65:$VE}),o($VB,[2,102]),{16:[1,262],101:[1,261]},{78:[1,263]},o($VG,[2,189]),o($VB,[2,103],{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21}),o($VB,[2,104],{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21}),{1:[2,18]},{15:[1,264]},o($V4,[2,118]),{15:$Vd,20:$Ve,38:106,52:51,71:265,72:105,78:$Vf,82:$Vg,84:52,85:$Vh,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},o($Vd1,[2,112]),o($Vd1,[2,113]),{1:[2,8],18:[1,266]},{15:[1,267]},{20:[1,268]},{15:[1,269]},{15:$Va,54:270,55:34,58:35},o($Vm1,[2,26],{36:271,37:[1,272]}),{17:$VK,51:$VL,81:[1,273],82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21},{15:$Vd,20:$Ve,52:274,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,38:275,52:51,78:$Vf,82:$Vg,84:52,85:$Vh,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:276,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},o($VI,[2,122]),o($Vn1,[2,127],{17:$VK,51:$VL,82:$Vh1,89:$VS,90:$VT,91:$VU,100:$V11,102:$V21}),o($Vn1,[2,128],{17:$VK,51:$VL,82:$Vh1,89:$VS,90:$VT,91:$VU,100:$V11,102:$V21}),o($Vo1,[2,129],{17:$VK,82:$Vh1,100:$V11,102:$V21}),o($Vo1,[2,130],{17:$VK,82:$Vh1,100:$V11,102:$V21}),o($Vo1,[2,131],{17:$VK,82:$Vh1,100:$V11,102:$V21}),o($Vo1,[2,132],{17:$VK,82:$Vh1,100:$V11,102:$V21}),o([1,15,22,34,37,42,48,50,53,57,61,63,66,67,69,70,73,74,77,80,81,83,86,92,101,111,114,116,119,122,123],$Vp1,{17:$VK,51:$VL,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21}),o([1,15,22,34,37,42,48,50,53,57,61,63,66,67,69,70,73,74,77,80,83,86,92,101,111,114,116,119,122,123],[2,134],{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21}),o($Vq1,[2,135],{17:$VK,51:$VL,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,100:$V11,102:$V21}),o($Vq1,[2,136],{17:$VK,51:$VL,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,100:$V11,102:$V21}),o($Vq1,[2,137],{17:$VK,51:$VL,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,100:$V11,102:$V21}),o($Vq1,[2,138],{17:$VK,51:$VL,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,100:$V11,102:$V21}),o($Vq1,[2,139],{17:$VK,51:$VL,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,100:$V11,102:$V21}),o($Vq1,[2,140],{17:$VK,51:$VL,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,100:$V11,102:$V21}),o($Vq1,[2,141],{17:$VK,51:$VL,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,100:$V11,102:$V21}),o($V31,[2,143]),{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:[1,277],102:$V21},o([17,51,81,82,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],$V91,{16:[1,278]}),{78:[1,279]},o($V31,[2,148]),{103:[1,280],104:[1,281],105:[1,282]},o($V31,[2,150]),o($V31,[2,152]),o($VI,[2,125],{84:283,85:[1,284]}),o($V31,[2,206]),{126:$V51,133:285,134:137},{15:$Vd,20:$Ve,38:286,52:51,78:$Vf,82:$Vg,84:52,85:$Vh,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},o($V31,[2,176]),{22:[1,287]},{15:$Vd,20:$Ve,38:224,51:$Vg1,52:226,78:$Vf,82:$Vg,84:52,85:$Vh,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,121:288,124:222,125:223,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,38:224,51:$Vg1,52:226,78:$Vf,82:$Vg,84:52,85:$Vh,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,121:289,124:222,125:223,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{22:[2,190],48:[1,290]},o($Vr1,[2,192]),o($Vr1,[2,193]),o($Vr1,[2,194]),o($Vr1,$VJ,{17:[1,291],51:$VL,80:$VM,81:$VN,82:$VO,83:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21}),o($V31,[2,161]),{113:292,114:$Vs1,123:$Vt1},{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,122:[1,294]},{15:$Vd,20:$Ve,52:229,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,112:295,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{99:$Ve1},{15:$Vd,20:$Ve,52:296,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:297,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:298,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:299,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:[1,300]},{15:$Vd,20:$Ve,52:301,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:[1,302]},{15:$Vd,20:$Ve,52:303,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},o($V31,[2,211]),{15:$Vd,20:$Ve,21:304,38:154,52:51,78:$Vf,82:$Vg,84:52,85:$Vh,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},o($Va1,[2,36]),o($Vb1,[2,39]),o($Vb1,[2,42]),o($Vv,[2,47]),{15:[1,305]},o($Vw,[2,52],{59:87,56:306,57:$V4,61:$Vx,63:$Vy,66:$Vz,67:$VA}),o($Vw,[2,53]),o($Vw,[2,56],{59:87,56:309,60:310,15:[1,308],17:$VC,50:[1,307],57:$V4,61:$Vx,63:$Vy,64:$VD,65:$VE,66:$Vz,67:$VA,100:$VF}),{15:[1,312],17:$VC,50:[1,313],62:311,64:$Vk1,65:$Vl1,100:$VF},{15:[1,315],17:$VC,50:[1,316],62:314,64:$Vk1,65:$Vl1,100:$VF},o($Vw,[2,68],{59:87,56:317,57:$V4,61:$Vx,63:$Vy,66:$Vz,67:$VA}),{15:[1,318]},{62:319,64:$Vk1,65:$Vl1},{15:$Vd,20:$Ve,52:320,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:321,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},o($Vw,[2,80],{59:87,56:322,57:$V4,61:$Vx,63:$Vy,66:$Vz,67:$VA}),{15:[1,323]},{62:324,64:$Vk1,65:$Vl1},o($VB,[2,101]),o($VG,[2,185]),{78:[1,325],101:[1,326]},{101:[1,327]},{17:[1,328]},o($V5,[2,110]),{15:$Vu1,19:329,23:$Vv1},{17:[1,332]},{15:$Vd,20:$Ve,21:333,38:154,52:51,78:$Vf,82:$Vg,84:52,85:$Vh,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{17:[1,334]},o($V6,[2,45]),o($Vm1,[2,25]),{15:$Vd,20:$Ve,38:335,52:51,78:$Vf,82:$Vg,84:52,85:$Vh,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:336,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{17:$VK,51:$VL,81:[1,337],82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21},o($VI,[2,123]),o([1,15,22,34,37,42,48,50,51,53,57,61,63,66,67,69,70,73,74,77,80,81,83,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,111,114,116,119,122,123],[2,142],{17:$VK,82:$Vh1,100:$V11}),o($V31,[2,144]),{78:[1,338],101:[1,339]},{101:[1,340]},o($V31,[2,149]),o($V31,[2,151]),o($V31,[2,153]),o($VI,[2,126]),{6:134,25:7,26:11,29:13,33:14,39:15,42:$V2,53:$V3},{86:[2,208]},o([48,86],[2,209]),o($V31,[2,177]),{22:[1,341]},{22:[1,342]},{15:$Vd,20:$Ve,38:224,51:$Vg1,52:226,78:$Vf,82:$Vg,84:52,85:$Vh,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,121:343,124:222,125:223,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vf1,51:[1,344]},{114:[1,345]},{15:$Vd,20:$Ve,52:346,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:347,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{113:348,114:$Vs1,123:$Vt1},{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,114:[1,349]},{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,116:[1,350]},{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,116:[1,351]},{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,114:[1,352]},{83:[1,353]},{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,111:[1,354],114:[1,355]},{83:[1,356]},{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,111:[1,357],114:[1,358]},o($Vj1,[2,213]),o($Vw,[2,51],{59:87,56:359,57:$V4,61:$Vx,63:$Vy,66:$Vz,67:$VA}),o($Vw,[2,55]),{15:[1,360]},o($Vw,[2,58],{59:87,56:361,60:362,57:$V4,61:$Vx,63:$Vy,64:$VD,65:$VE,66:$Vz,67:$VA}),o($Vw,[2,59]),o($Vw,[2,62],{59:87,56:363,57:$V4,61:$Vx,63:$Vy,66:$Vz,67:$VA}),o($Vw,[2,74],{59:87,56:364,57:$V4,61:$Vx,63:$Vy,66:$Vz,67:$VA}),{62:365,64:$Vk1,65:$Vl1},{15:[1,366]},o($Vw,[2,86],{59:87,56:367,57:$V4,61:$Vx,63:$Vy,66:$Vz,67:$VA}),{62:368,64:$Vk1,65:$Vl1},{15:[1,369]},o($Vw,[2,71]),{62:370,64:$Vk1,65:$Vl1},o($Vw,[2,70],{59:87,56:371,57:$V4,61:$Vx,63:$Vy,66:$Vz,67:$VA}),o($VB,[2,92],{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21}),o($VB,[2,93],{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21}),o($Vw,[2,83]),{62:372,64:$Vk1,65:$Vl1},o($Vw,[2,82],{59:87,56:373,57:$V4,61:$Vx,63:$Vy,66:$Vz,67:$VA}),{101:[1,374]},o($VG,[2,187]),o($VG,[2,188]),{15:[1,375]},{1:[2,10]},{1:[2,16]},{1:[2,17]},{15:[1,376]},{22:[1,377]},{15:[1,378]},o($Vm1,[2,27]),o($VI,[2,120],{17:$VK,51:$VL,81:$Vp1,92:$Vp1,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21}),{15:$Vd,20:$Ve,52:379,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{101:[1,380]},o($V31,[2,146]),o($V31,[2,147]),o($V31,[2,178]),o($V31,[2,179]),{22:[2,191]},o($Vr1,[2,195]),o($V31,[2,162]),{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,114:[2,183]},o($Vw1,[2,180],{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,111:[1,381]}),{114:[1,382]},o($V31,[2,164]),{15:$Vd,20:$Ve,52:383,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:384,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},o($V31,[2,167]),{15:$Vd,20:$Ve,52:385,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:386,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},o($V31,[2,171]),{15:$Vd,20:$Ve,52:387,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},{15:$Vd,20:$Ve,52:388,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},o($V31,[2,175]),o($Vw,[2,54]),o($Vw,[2,57],{59:87,56:389,60:390,57:$V4,61:$Vx,63:$Vy,64:$VD,65:$VE,66:$Vz,67:$VA}),o($Vw,[2,61]),o($Vw,[2,63],{59:87,56:391,57:$V4,61:$Vx,63:$Vy,66:$Vz,67:$VA}),o($Vw,[2,65]),o($Vw,[2,75]),o($Vw,[2,76],{59:87,56:392,57:$V4,61:$Vx,63:$Vy,66:$Vz,67:$VA}),{62:393,64:$Vk1,65:$Vl1},o($Vw,[2,87]),o($Vw,[2,88],{59:87,56:394,57:$V4,61:$Vx,63:$Vy,66:$Vz,67:$VA}),{62:395,64:$Vk1,65:$Vl1},o($Vw,[2,69],{59:87,56:396,57:$V4,61:$Vx,63:$Vy,66:$Vz,67:$VA}),o($Vw,[2,73]),o($Vw,[2,81],{59:87,56:397,57:$V4,61:$Vx,63:$Vy,66:$Vz,67:$VA}),o($Vw,[2,85]),o($VG,[2,186]),{1:[2,19]},{1:[2,9],18:[1,398]},{1:[2,12],18:[1,399]},{20:[1,400]},o($VI,[2,121],{17:$VK,51:$VL,81:$Vp1,92:$Vp1,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21}),o($V31,[2,145]),{15:$Vd,20:$Ve,52:229,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,112:401,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},o($V31,[2,163]),{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,114:[1,402]},{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,114:[1,403]},{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,111:[1,404],114:[1,405]},{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,114:[1,406]},{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,111:[1,407],114:[1,408]},{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,114:[1,409]},o($Vw,[2,60]),o($Vw,[2,64],{59:87,56:410,57:$V4,61:$Vx,63:$Vy,66:$Vz,67:$VA}),o($Vw,[2,66]),o($Vw,[2,77]),o($Vw,[2,78],{59:87,56:411,57:$V4,61:$Vx,63:$Vy,66:$Vz,67:$VA}),o($Vw,[2,89]),o($Vw,[2,90],{59:87,56:412,57:$V4,61:$Vx,63:$Vy,66:$Vz,67:$VA}),o($Vw,[2,72]),o($Vw,[2,84]),{15:$Vu1,19:413,23:$Vv1},{15:$Vu1,19:414,23:$Vv1},{15:$Vd,20:$Ve,21:415,38:154,52:51,78:$Vf,82:$Vg,84:52,85:$Vh,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},o($Vw1,[2,181]),o($V31,[2,165]),o($V31,[2,166]),{15:$Vd,20:$Ve,52:416,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},o($V31,[2,170]),o($V31,[2,169]),{15:$Vd,20:$Ve,52:417,78:$Vf,82:$Vg,85:$V61,88:$Vi,100:$Vj,103:$Vk,106:53,107:57,108:58,109:60,110:$Vl,115:$Vm,117:$Vn,118:$Vo,120:$Vp,126:$Vq,127:68,128:69,129:70,130:$Vr,131:$Vs,132:$Vt},o($V31,[2,174]),o($V31,[2,173]),o($Vw,[2,67]),o($Vw,[2,79]),o($Vw,[2,91]),{1:[2,11]},{1:[2,14]},{22:[1,418]},{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,114:[1,419]},{17:$VK,51:$VL,81:$VN,82:$Vh1,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,102:$V21,114:[1,420]},{1:[2,13],18:[1,421]},o($V31,[2,168]),o($V31,[2,172]),{15:$Vu1,19:422,23:$Vv1},{1:[2,15]}],
defaultActions: {2:[2,1],4:[2,3],5:[2,4],6:[2,5],8:[2,6],9:[2,7],18:[2,2],174:[2,18],285:[2,208],329:[2,10],330:[2,16],331:[2,17],343:[2,191],375:[2,19],413:[2,11],414:[2,14],422:[2,15]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


var ast = require('./ast');


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                    yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);
                    yy.logDebugTokens("STRING - %s", yy_.yytext);
                    return 126;
                  
break;
case 1:
                    yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);
                    yy.logDebugTokens("STRING - %s", yy_.yytext);
                    return 126;
                  
break;
case 2: yy.logDebugTokens("DOT"); return 17; 
break;
case 3: yy.logDebugTokens("PLUS"); return 87; 
break;
case 4: yy.logDebugTokens("MINUS"); return 88; 
break;
case 5: yy.logDebugTokens("MULT"); return 51; 
break;
case 6: yy.logDebugTokens("DIV"); return 89; 
break;
case 7: yy.logDebugTokens("MOD"); return 90; 
break;
case 8: yy.logDebugTokens("AND"); return 81; 
break;
case 9: yy.logDebugTokens("OR"); return 92; 
break;
case 10: yy.logDebugTokens("EQ"); return 93; 
break;
case 11: yy.logDebugTokens("EQ"); return 93; 
break;
case 12: yy.logDebugTokens("NE"); return 98; 
break;
case 13: yy.logDebugTokens("NE"); return 98; 
break;
case 14: yy.logDebugTokens("LT"); return 94; 
break;
case 15: yy.logDebugTokens("LTE"); return 95; 
break;
case 16: yy.logDebugTokens("GT"); return 96; 
break;
case 17: yy.logDebugTokens("GTE"); return 97; 
break;
case 18: yy.logDebugTokens("NOT"); return 82; 
break;
case 19: yy.logDebugTokens("LIKE"); return 99; 
break;
case 20: yy.logDebugTokens("IS"); return 102; 
break;
case 21: yy.logDebugTokens("MISSING"); return 104; 
break;
case 22: yy.logDebugTokens("VALUED"); return 105; 
break;
case 23: yy.logDebugTokens("SELECT"); return 42; 
break;
case 24: yy.logDebugTokens("AS"); return 50; 
break;
case 25: yy.logDebugTokens("IN"); return 83; 
break;
case 26: yy.logDebugTokens("FROM"); return 53; 
break;
case 27: yy.logDebugTokens("WHERE"); return 69; 
break;
case 28: yy.logDebugTokens("ORDER"); return 70; 
break;
case 29: yy.logDebugTokens("BY"); return 35; 
break;
case 30: yy.logDebugTokens("ASC"); return 73; 
break;
case 31: yy.logDebugTokens("DESC"); return 74; 
break;
case 32: yy.logDebugTokens("LIMIT"); return 77; 
break;
case 33: yy.logDebugTokens("OFFSET"); return 79; 
break;
case 34:
                    yy.logDebugTokens("EXPLAIN"); return 5;
                  
break;
case 35:
                    yy.logDebugTokens("DISTINCT"); return 44;
                  
break;
case 36:
                    yy.logDebugTokens("UNIQUE"); return 45;
                  
break;
case 37:
                    yy.logDebugTokens("CASE"); return 110;
                  
break;
case 38:
                    yy.logDebugTokens("WHEN"); return 111;
                  
break;
case 39:
                    yy.logDebugTokens("THEN"); return 122;
                  
break;
case 40:
                    yy.logDebugTokens("ELSE"); return 123;
                  
break;
case 41:
                    yy.logDebugTokens("END"); return 114;
                  
break;
case 42:
                    yy.logDebugTokens("ANY"); return 115;
                  
break;
case 43:
                    yy.logDebugTokens("FIRST"); return 118;
                  
break;
case 44:
                    yy.logDebugTokens("ALL"); return 43;
                  
break;
case 45:
                    yy.logDebugTokens("GROUP"); return 34;
                  
break;
case 46:
                    yy.logDebugTokens("BY"); return 35;
                  
break;
case 47:
                    yy.logDebugTokens("HAVING"); return 37;
                  
break;
case 48:
                    yy.logDebugTokens("CREATE"); return 11;
                  
break;
case 49:
                    yy.logDebugTokens("DROP"); return 24;
                  
break;
case 50:
                    yy.logDebugTokens("VIEW"); return 23;
                  
break;
case 51:
                    yy.logDebugTokens("USING"); return 18;
                  
break;
case 52:
                    yy.logDebugTokens("INDEX"); return 13;
                  
break;
case 53:
                    yy.logDebugTokens("ON"); return 14;
                  
break;
case 54:
                    yy.logDebugTokens("PRIMARY"); return 12;
                  
break;
case 55:
                    yy.logDebugTokens("ARRAY"); return 120;
                  
break;
case 56:
                    yy.logDebugTokens("ALTER"); return 'ALTER';
                  
break;
case 57:
                    yy.logDebugTokens("BETWEEN"); return 80;
                  
break;
case 58:
                    yy.logDebugTokens("BUCKET"); return 'BUCKET';
                  
break;
case 59:
                    yy.logDebugTokens("CAST"); return 'CAST';
                  
break;
case 60:
                    yy.logDebugTokens("COLLATE"); return 'COLLATE';
                  
break;
case 61:
                    yy.logDebugTokens("DATABASE"); return 'DATABASE';
                  
break;
case 62:
                    yy.logDebugTokens("DELETE"); return 'DELETE';
                  
break;
case 63:
                    yy.logDebugTokens("EACH"); return 'EACH';
                  
break;
case 64:
                    yy.logDebugTokens("EXCEPT"); return 'EXCEPT';
                  
break;
case 65:
                    yy.logDebugTokens("EXISTS"); return 'EXISTS';
                  
break;
case 66: yy.logDebugTokens("IF"); return 'IF'; 
break;
case 67:
                    yy.logDebugTokens("INLINE"); return 'INLINE';
                  
break;
case 68:
                    yy.logDebugTokens("INSERT"); return 'INSERT';
                  
break;
case 69:
                    yy.logDebugTokens("INTERSECT"); return 'INTERSECT';
                  
break;
case 70:
                    yy.logDebugTokens("INTO"); return 'INTO';
                  
break;
case 71:
                    yy.logDebugTokens("JOIN"); return 61;
                  
break;
case 72:
                    yy.logDebugTokens("PATH"); return 'PATH';
                  
break;
case 73:
                    yy.logDebugTokens("UNION"); return 'UNION';
                  
break;
case 74:
                    yy.logDebugTokens("UPDATE"); return 'UPDATE';
                  
break;
case 75:
                    yy.logDebugTokens("POOL"); return 'POOL';
                  
break;
case 76:
                    yy.logDebugTokens("SATISFIES"); return 116;
                  
break;
case 77:
                    yy.logDebugTokens("EVERY"); return 117;
                  
break;
case 78:
                    yy.logDebugTokens("UNNEST"); return 57;
                  
break;
case 79:
                    yy.logDebugTokens("FOR"); return 119;
                  
break;
case 80:
                    yy.logDebugTokens("KEY"); return 64;
                  
break;
case 81:
                    yy.logDebugTokens("KEYS"); return 65;
                  
break;
case 82:
                    yy.logDebugTokens("INNER"); return 66;
                  
break;
case 83:
                    yy.logDebugTokens("OUTER"); return 68;
                  
break;
case 84:
                    yy.logDebugTokens("LEFT"); return 67;
                  
break;
case 85:
                    yy.logDebugTokens("NEST"); return 63;
                  
break;
case 86: yy.logDebugTokens("CONCAT"); return 91; 
break;
case 87: yy.logDebugTokens("LPAREN"); return 20; 
break;
case 88: yy.logDebugTokens("RPAREN"); return 22; 
break;
case 89: yy.logDebugTokens("LBRACE"); return 85; 
break;
case 90: yy.logDebugTokens("RBRACE"); return 86; 
break;
case 91: yy.logDebugTokens("COMMA"); return 48; 
break;
case 92: yy.logDebugTokens("COLON"); return 16; 
break;
case 93: yy.logDebugTokens("LBRACKET"); return 100; 
break;
case 94: yy.logDebugTokens("RBRACKET"); return 101; 
break;
case 95: yy.logDebugTokens("TRUE"); return 130;
break;
case 96: yy.logDebugTokens("FALSE"); return 131;
break;
case 97: yy.logDebugTokens("NULL"); return 103;
break;
case 98:
                  // there are 2 separate rules for NUMBER
                  // instead of 1 with two optional components
                  // to differntiate it from plan INT
                    yy.logDebugTokens("NUMBER - %f", yy_.yytext);
                    yy_.yytext = parseDouble(yy_.yytext);
                    return 132;
                  
break;
case 99:
                    yy.logDebugTokens("NUMBER - %f", yy_.yytext);
                    yy_.yytext = parseDouble(yy_.yytext);
                    return 132;
                  
break;
case 100:
                    yy.logDebugTokens("INT - %d", yy_.yytext);
                    yy_.yytext = parseInt(yy_.yytext);
                    return 78;
                  
break;
case 101: yy.logDebugTokens("WHITESPACE (count=%d)", yy_.yytext.length); /* eat up whitespace */ 
break;
case 102:
                    yy.logDebugTokens("IDENTIFIER - %s", yy_.yytext);
                    return 15;
                  
break;
case 103:
                    //this rule allows for a wider range of identifiers by escaping them
                    yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);
                    yy.logDebugTokens("IDENTIFIER - %s", yy_.yytext);
                    return 15;
                  
break;
}
},
rules: [/^(?:"((\\")|(\\\\)|(\\\/)|(\\b)|(\\f)|(\\n)|(\\r)|(\\t)|(\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])|[^\"])*")/,/^(?:'((\\")|(\\\\)|(\\\/)|(\\b)|(\\f)|(\\n)|(\\r)|(\\t)|(\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])|[^''])*')/,/^(?:\.)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:[aA][nN][dD])/,/^(?:[oO][rR])/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:<>)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:>=)/,/^(?:[nN][oO][tT])/,/^(?:[lL][iI][kK][eE])/,/^(?:[iI][sS])/,/^(?:[mM][iI][sS][sS][iI][nN][gG])/,/^(?:[vV][aA][lL][uU][eE][dD])/,/^(?:[sS][eE][lL][eE][cC][tT])/,/^(?:[aA][sS])/,/^(?:[iI][nN])/,/^(?:[fF][rR][oO][mM])/,/^(?:[wW][hH][eE][rR][eE])/,/^(?:[oO][rR][dD][eE][rR])/,/^(?:[bB][yY])/,/^(?:[aA][sS][cC])/,/^(?:[dD][eE][sS][cC])/,/^(?:[lL][iI][mM][iI][tT])/,/^(?:[oO][fF][fF][sS][eE][tT])/,/^(?:[eE][xX][pP][lL][aA][iI][nN])/,/^(?:[dD][iI][sS][tT][iI][nN][cC][tT])/,/^(?:[uU][nN][iI][qQ][uU][eE])/,/^(?:[cC][aA][sS][eE])/,/^(?:[wW][hH][eE][nN])/,/^(?:[tT][hH][eE][nN])/,/^(?:[eE][lL][sS][eE])/,/^(?:[eE][nN][dD])/,/^(?:[aA][nN][yY])/,/^(?:[fF][iI][rR][sS][tT])/,/^(?:[aA][lL][lL])/,/^(?:[gG][rR][oO][uU][pP])/,/^(?:[bB][yY])/,/^(?:[hH][aA][vV][iI][nN][gG])/,/^(?:[cC][rR][eE][aA][tT][eE])/,/^(?:[dD][rR][oO][pP])/,/^(?:[vV][iI][eE][wW])/,/^(?:[uU][sS][iI][nN][gG])/,/^(?:[iI][nN][dD][eE][xX])/,/^(?:[oO][nN])/,/^(?:[pP][rR][iI][mM][aA][rR][yY])/,/^(?:[aA][rR][rR][aA][yY])/,/^(?:[aA][lL][tT][eE][rR])/,/^(?:[bB][eE][tT][wW][eE][eE][nN])/,/^(?:[bB][uU][cC][kK][eE][tT])/,/^(?:[cC][aA][sS][tT])/,/^(?:[cC][oO][lL][lL][aA][tT][eE])/,/^(?:[dD][aA][tT][aA][bB][aA][sS][eE])/,/^(?:[dD][eE][lL][eE][tT][eE])/,/^(?:[eE][aA][cC][hH])/,/^(?:[eE][xX][cC][eE][pP][tT])/,/^(?:[eE][xX][iI][sS][tT][sS])/,/^(?:[iI][fF])/,/^(?:[iI][nN][lL][iI][nN][eE])/,/^(?:[iI][nN][sS][eE][rR][tT])/,/^(?:[iI][nN][tT][eE][rR][sS][eE][cC][tT])/,/^(?:[iI][nN][tT][oO])/,/^(?:[jJ][oO][iI][nN])/,/^(?:[pP][aA][tT][hH])/,/^(?:[uU][nN][iI][oO][nN])/,/^(?:[uU][pP][dD][aA][tT][eE])/,/^(?:[pP][oO][oO][lL])/,/^(?:[sS][aA][tT][iI][sS][fF][iI][eE][sS])/,/^(?:[eE][vV][eE][rR][yY])/,/^(?:[uU][nN][nN][eE][sS][tT])/,/^(?:[fF][oO][rR])/,/^(?:[kK][eE][yY])/,/^(?:[kK][eE][yY][sS])/,/^(?:[iI][nN][nN][eE][rR])/,/^(?:[oO][uU][tT][eE][rR])/,/^(?:[lL][eE][fF][tT])/,/^(?:[nN][eE][sS][tT])/,/^(?:\|\|)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?::)/,/^(?:\[)/,/^(?:\])/,/^(?:[tT][rR][uU][eE])/,/^(?:[fF][aA][lL][sS][eE])/,/^(?:[nN][uU][lL][lL])/,/^(?:([0-9]|[1-9][0-9]*)(\.[0-9][0-9]*)([eE][+\-]?[0-9][0-9]*)?)/,/^(?:([0-9]|[1-9][0-9]*)(\.[0-9][0-9]*)?([eE][+\-]?[0-9][0-9]*))/,/^(?:[0-9]|[1-9][0-9]*)/,/^(?:[ \t\n]+)/,/^(?:[a-zA-Z_][a-zA-Z0-9\-_:]*)/,/^(?:(?=((\\")|(\\\\)|(\\\/)|(\\b)|(\\f)|(\\n)|(\\r)|(\\t)|(\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])|[^`])+)(?=((\\")|(\\\\)|(\\\/)|(\\b)|(\\f)|(\\n)|(\\r)|(\\t)|(\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])|[^`])+))/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = n1ql;
exports.Parser = n1ql.Parser;
exports.parse = function () { return n1ql.parse.apply(n1ql, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}